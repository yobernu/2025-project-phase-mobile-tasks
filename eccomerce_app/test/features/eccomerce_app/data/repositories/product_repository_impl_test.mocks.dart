// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/features/eccomerce_app/data/repositories/product_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ecommerce_app/core/network/network_info.dart' as _i7;
import 'package:ecommerce_app/features/eccomerce_app/data/datasources/product_local_data_sources.dart'
    as _i6;
import 'package:ecommerce_app/features/eccomerce_app/data/datasources/product_remote_data_sources.dart'
    as _i4;
import 'package:ecommerce_app/features/eccomerce_app/data/models/product_model.dart'
    as _i2;
import 'package:ecommerce_app/features/eccomerce_app/domain/entities/product.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductModel_0 extends _i1.SmartFake implements _i2.ProductModel {
  _FakeProductModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProduct_1 extends _i1.SmartFake implements _i3.Product {
  _FakeProduct_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductRemoteDataSources].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSources extends _i1.Mock
    implements _i4.ProductRemoteDataSources {
  MockProductRemoteDataSources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.ProductModel>> getAllProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProducts, []),
            returnValue: _i5.Future<List<_i2.ProductModel>>.value(
              <_i2.ProductModel>[],
            ),
          )
          as _i5.Future<List<_i2.ProductModel>>);

  @override
  _i5.Future<_i2.ProductModel> getProductById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue: _i5.Future<_i2.ProductModel>.value(
              _FakeProductModel_0(
                this,
                Invocation.method(#getProductById, [id]),
              ),
            ),
          )
          as _i5.Future<_i2.ProductModel>);

  @override
  _i5.Future<_i2.ProductModel> createProduct(_i3.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue: _i5.Future<_i2.ProductModel>.value(
              _FakeProductModel_0(
                this,
                Invocation.method(#createProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i2.ProductModel>);

  @override
  _i5.Future<_i2.ProductModel> updateProduct(_i3.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i5.Future<_i2.ProductModel>.value(
              _FakeProductModel_0(
                this,
                Invocation.method(#updateProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i2.ProductModel>);

  @override
  _i5.Future<void> deleteProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [ProductLocalDataSources].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSources extends _i1.Mock
    implements _i6.ProductLocalDataSources {
  MockProductLocalDataSources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Product>> getAllProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProducts, []),
            returnValue: _i5.Future<List<_i3.Product>>.value(<_i3.Product>[]),
          )
          as _i5.Future<List<_i3.Product>>);

  @override
  _i5.Future<_i3.Product> getProductById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue: _i5.Future<_i3.Product>.value(
              _FakeProduct_1(this, Invocation.method(#getProductById, [id])),
            ),
          )
          as _i5.Future<_i3.Product>);

  @override
  _i5.Future<void> cacheProducts(List<_i3.Product>? products) =>
      (super.noSuchMethod(
            Invocation.method(#cacheProducts, [products]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cacheProduct(_i3.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#cacheProduct, [product]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateProduct(_i3.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteProduct(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
