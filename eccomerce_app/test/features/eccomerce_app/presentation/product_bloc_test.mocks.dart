// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/features/eccomerce_app/presentation/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:ecommerce_app/core/errors/failures.dart' as _i6;
import 'package:ecommerce_app/core/utils/input_converter.dart' as _i12;
import 'package:ecommerce_app/features/eccomerce_app/domain/entities/product.dart'
    as _i7;
import 'package:ecommerce_app/features/eccomerce_app/domain/repositories/product_repository.dart'
    as _i2;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/delete_product.dart'
    as _i10;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/get_all_products.dart'
    as _i4;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/get_product_by_id.dart'
    as _i8;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/insert_product.dart'
    as _i11;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/update_product.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllProducts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProducts extends _i1.Mock implements _i4.GetAllProducts {
  MockGetAllProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>> call(
    _i4.GetAllProductsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Product>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>);
}

/// A class which mocks [GetProductById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductById extends _i1.Mock implements _i8.GetProductById {
  MockGetProductById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Product>> call(
    _i8.GetProductByIdParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Product>>.value(
              _FakeEither_1<_i6.Failure, _i7.Product>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Product>>);
}

/// A class which mocks [UpdateProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProduct extends _i1.Mock implements _i9.UpdateProduct {
  MockUpdateProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
    _i9.UpdateProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProduct extends _i1.Mock implements _i10.DeleteProduct {
  MockDeleteProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
    _i10.DeleteProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [InsertProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsertProduct extends _i1.Mock implements _i11.InsertProduct {
  MockInsertProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
    _i11.InsertProductParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i12.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(
            Invocation.method(#stringToUnsignedInteger, [str]),
            returnValue: _FakeEither_1<_i6.Failure, int>(
              this,
              Invocation.method(#stringToUnsignedInteger, [str]),
            ),
          )
          as _i3.Either<_i6.Failure, int>);
}
