// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/features/eccomerce_app/presentation/pages/screens/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:ecommerce_app/core/utils/input_converter.dart' as _i7;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/delete_product.dart'
    as _i5;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/get_all_products.dart'
    as _i2;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/get_product_by_id.dart'
    as _i3;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/insert_product.dart'
    as _i6;
import 'package:ecommerce_app/features/eccomerce_app/domain/usecases/update_product.dart'
    as _i4;
import 'package:ecommerce_app/features/eccomerce_app/presentation/providers/bloc/product_bloc.dart'
    as _i9;
import 'package:ecommerce_app/features/eccomerce_app/presentation/providers/bloc/product_event.dart'
    as _i11;
import 'package:ecommerce_app/features/eccomerce_app/presentation/providers/bloc/product_state.dart'
    as _i8;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAllProducts_0 extends _i1.SmartFake
    implements _i2.GetAllProducts {
  _FakeGetAllProducts_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetProductById_1 extends _i1.SmartFake
    implements _i3.GetProductById {
  _FakeGetProductById_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateProduct_2 extends _i1.SmartFake implements _i4.UpdateProduct {
  _FakeUpdateProduct_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteProduct_3 extends _i1.SmartFake implements _i5.DeleteProduct {
  _FakeDeleteProduct_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsertProduct_4 extends _i1.SmartFake implements _i6.InsertProduct {
  _FakeInsertProduct_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInputConverter_5 extends _i1.SmartFake
    implements _i7.InputConverter {
  _FakeInputConverter_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductState_6 extends _i1.SmartFake implements _i8.ProductState {
  _FakeProductState_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBloc extends _i1.Mock implements _i9.ProductBloc {
  MockProductBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllProducts get getAllProductsUsecase =>
      (super.noSuchMethod(
            Invocation.getter(#getAllProductsUsecase),
            returnValue: _FakeGetAllProducts_0(
              this,
              Invocation.getter(#getAllProductsUsecase),
            ),
          )
          as _i2.GetAllProducts);

  @override
  _i3.GetProductById get getSingleProductUsecase =>
      (super.noSuchMethod(
            Invocation.getter(#getSingleProductUsecase),
            returnValue: _FakeGetProductById_1(
              this,
              Invocation.getter(#getSingleProductUsecase),
            ),
          )
          as _i3.GetProductById);

  @override
  _i4.UpdateProduct get updateProductUsecase =>
      (super.noSuchMethod(
            Invocation.getter(#updateProductUsecase),
            returnValue: _FakeUpdateProduct_2(
              this,
              Invocation.getter(#updateProductUsecase),
            ),
          )
          as _i4.UpdateProduct);

  @override
  _i5.DeleteProduct get deleteProductUsecase =>
      (super.noSuchMethod(
            Invocation.getter(#deleteProductUsecase),
            returnValue: _FakeDeleteProduct_3(
              this,
              Invocation.getter(#deleteProductUsecase),
            ),
          )
          as _i5.DeleteProduct);

  @override
  _i6.InsertProduct get createProductUsecase =>
      (super.noSuchMethod(
            Invocation.getter(#createProductUsecase),
            returnValue: _FakeInsertProduct_4(
              this,
              Invocation.getter(#createProductUsecase),
            ),
          )
          as _i6.InsertProduct);

  @override
  _i7.InputConverter get inputConverter =>
      (super.noSuchMethod(
            Invocation.getter(#inputConverter),
            returnValue: _FakeInputConverter_5(
              this,
              Invocation.getter(#inputConverter),
            ),
          )
          as _i7.InputConverter);

  @override
  _i8.ProductState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeProductState_6(this, Invocation.getter(#state)),
          )
          as _i8.ProductState);

  @override
  _i10.Stream<_i8.ProductState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i10.Stream<_i8.ProductState>.empty(),
          )
          as _i10.Stream<_i8.ProductState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i11.ProductEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i11.ProductEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i8.ProductState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i11.ProductEvent>(
    _i12.EventHandler<E, _i8.ProductState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i12.Transition<_i11.ProductEvent, _i8.ProductState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void onChange(_i12.Change<_i8.ProductState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
