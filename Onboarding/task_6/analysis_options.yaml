include: package:flutter_lints/flutter.yaml

linter:
  rules:
    avoid_print: true
    prefer_const_constructors: true
    prefer_const_literals_to_create_immutables: true
    avoid_unnecessary_containers: true
    always_declare_return_types: true
    prefer_single_quotes: true
    directives_ordering: true
    prefer_relative_imports: true
    use_key_in_widget_constructors: true
    sized_box_for_whitespace: true
    prefer_final_fields: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_conditional_assignment: true
    prefer_collection_literals: true
    avoid_redundant_argument_values: true
    prefer_asserts_in_initializer_lists: true
    avoid_void_async: true
    prefer_const_declarations: true
    prefer_typing_uninitialized_variables: true
    prefer_interpolation_to_compose_strings: true

    # --- Replace Invalid Rules ---
    always_specify_types: true  # Alternative to `avoid_dynamic` (encourages explicit types).
    # No direct replacement for `unnecessary_nullable_return_type`; review manually.

# avoid_print: true    #use import 'dart:developer' as dev;   >>> dev.log();
# prefer_const_constructors: true              #const Container()
# prefer_const_literals_to_create_immutables: true         #final num = const [1,2,3];   const [], const {}, ...
# avoid_unnecessary_containers: true 
# always_declare_return_types: true       # String greet(String name) => 'hello $name'; 
# prefer_single_quotes: true       
# directives_ordering: true         # dart > package > relative imports
# prefer_relative_imports: true      # .../dir/file.dart
# use_key_in_widget_constructors: true     #const MyWidget({super.key});
# sized_box_for_whitespace: true       #if only width and height is needed
# avoid_dynamic: true          # use Map<String, int> parseData(String input) { ... } // Explicit type.
# prefer_final_fields: true    #class User { final String name; // Immutable. }
# unnecessary_nullable_return_type: false         #Future<String?>? fetchData() { ... } // Double nullable.       remove 2dn ?
# prefer_is_empty: true             #if (list.length == 0) { ... }
# prefer_is_not_empty: true 
# prefer_conditional_assignment: true          #value ??= 10;
# prefer_collection_literals: true       # not List<int>()      but <int>[] ðŸ‘Œ
# avoid_redundant_argument_values:      #ex -   enabled=false    already false default
# prefer_asserts_in_initializer_lists: true       # Rectangle(this.width) : assert(width > 0); // Early check.   not Rectangle(this.width) {assert(width>0)    // Late assertion}
# avoid_void_async: true               #void fetchData() async { ... } // Silent errors.          Future<void> fetchData() async { ... }
# prefer_const_declarations: true    #final pi = 3.14;   const pi = 3.14
# prefer_typing_uninitialized_variables: true    #late var num;   bad         late int num; Good
# prefer_foreach: true      #list.forEach(dosomething)   not use list (for i ...)
# prefer_interpolation_to_compose_Strings: true     #'Hello, ' + name + '!';        'Hello, $name!'; good
# #//Catch async/await pitfalls:

# await_only_futures: true          # Ensures `await` is used only on Futures.

# # Null safety:
# null_check_on_nullable_type_parameter: true  # Avoids redundant null checks like `x!` when `x` is already non-nullable.

# # Code style:
# curly_braces_in_flow_control_structures: true  # Requires `{}` in `if/for` blocks.
# omit_local_variable_types: true   # Encourages type inference (e.g., `final x = 1` over `final int x = 1`).